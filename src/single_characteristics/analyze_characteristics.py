from src.lib.data_handling import (
    standardize,
    normalize,
)
from src.single_characteristics.extract_characteristics import (
    word_count_any_parallel,
    word_count_any_in_main_parallel,
    word_count_any_in_assembler_parallel,
    code_length,
    code_length_in_main,
    comments_ratio,
)

# 0 -> source code
# 1 -> preprocessed code
# 2 -> assembler
characteristics = [
    (word_count_any_parallel("define"), "wc_define", 0),
    (word_count_any_parallel("using"), "wc_using", 0),
    (word_count_any_parallel("define int long long"), "wc_define_int_long_long", 0),
    (word_count_any_parallel("for"), "wc_for", 0),
    (word_count_any_parallel("if"), "wc_if", 0),
    (word_count_any_parallel("vector"), "wc_vector", 0),
    (word_count_any_parallel("rep"), "wc_rep", 0),
    (word_count_any_parallel("auto"), "wc_auto", 0),
    (word_count_any_in_main_parallel("for"), "wc(main)_for", 0),
    (word_count_any_in_main_parallel("if"), "wc(main)_if", 0),
    (word_count_any_in_main_parallel("vector"), "wc(main)_vector", 0),
    (word_count_any_in_main_parallel("rep"), "wc(main)_rep", 0),
    (word_count_any_in_main_parallel("auto"), "wc(main)_auto", 0),
    (word_count_any_parallel("lower_bound"), "wc_lower_bound", 0),
    (word_count_any_in_main_parallel("lower_bound"), "wc(main)_lower_bound", 0),
    (word_count_any_parallel("upper_bound"), "wc_upper_bound", 0),
    (word_count_any_in_main_parallel("upper_bound"), "wc(main)_upper_bound", 0),
    (word_count_any_parallel("gcd"), "wc_gcd", 0),
    (word_count_any_in_main_parallel("gcd"), "wc(main)_gcd", 0),
    (word_count_any_parallel("lcm"), "wc_lcm", 0),
    (word_count_any_in_main_parallel("lcm"), "wc(main)_lcm", 0),
    (word_count_any_parallel("builtin"), "wc_builtin", 0),
    (word_count_any_in_main_parallel("builtin"), "wc(main)_builtin", 0),
    (word_count_any_parallel("popcount"), "wc_popcount", 0),
    (word_count_any_in_main_parallel("popcount"), "wc(main)_popcount", 0),
    (word_count_any_parallel("template"), "wc_template", 0),
    (word_count_any_parallel("any_of"), "wc_any_of", 0),
    (word_count_any_in_main_parallel("any_of"), "wc(main)_any_of", 0),
    (word_count_any_parallel("all_of"), "wc_all_of", 0),
    (word_count_any_in_main_parallel("all_of"), "wc(main)_all_of", 0),
    (word_count_any_parallel("unique"), "wc_unique", 0),
    (word_count_any_in_main_parallel("unique"), "wc(main)_unique", 0),
    (word_count_any_parallel("sort"), "wc_sort", 0),
    (word_count_any_in_main_parallel("sort"), "wc(main)_sort", 0),
    (word_count_any_parallel("rbegin"), "wc_rbegin", 0),
    (word_count_any_in_main_parallel("rbegin"), "wc(main)_rbegin", 0),
    (word_count_any_parallel("ostream"), "wc_ostream", 0),
    (word_count_any_in_main_parallel("ostream"), "wc(main)_ostream", 0),
    (word_count_any_parallel("unlocked"), "wc_unlocked", 0),
    (word_count_any_in_main_parallel("unlocked"), "wc(main)_unlocked", 0),
    (word_count_any_parallel("constexpr"), "wc_constexpr", 0),
    (word_count_any_in_main_parallel("constexpr"), "wc(main)_constexpr", 0),
    (word_count_any_parallel("const"), "wc_const", 0),
    (word_count_any_in_main_parallel("const"), "wc(main)_const", 0),
    (word_count_any_parallel("int"), "wc_int", 0),
    (word_count_any_in_main_parallel("int"), "wc(main)_int", 0),
    (word_count_any_parallel("long"), "wc_long", 0),
    (word_count_any_in_main_parallel("long"), "wc(main)_long", 0),
    (word_count_any_parallel("mint"), "wc_mint", 0),
    (word_count_any_in_main_parallel("mint"), "wc(main)_mint", 0),
    (word_count_any_parallel("modint"), "wc_modint", 0),
    (word_count_any_in_main_parallel("modint"), "wc(main)_modint", 0),
    (word_count_any_parallel("chmin"), "wc_chmin", 0),
    (word_count_any_in_main_parallel("chmin"), "wc(main)_chmin", 0),
    (word_count_any_parallel(";"), "wc_;", 0),
    (word_count_any_in_main_parallel(";"), "wc(main)_;", 0),
    (word_count_any_parallel("and"), "wc_and", 0),
    (word_count_any_in_main_parallel("and"), "wc(main)_and", 0),
    (word_count_any_parallel("&&"), "wc_&&", 0),
    (word_count_any_in_main_parallel("&&"), "wc(main)_&&", 0),
    (word_count_any_parallel("(true)"), "wc_(true)", 0),
    (word_count_any_in_main_parallel("(true)"), "wc(main)_(true)", 0),
    (word_count_any_parallel("(1)"), "wc_(1)", 0),
    (word_count_any_in_main_parallel("(1)"), "wc(main)_(1)", 0),
    (word_count_any_parallel("(;;)"), "wc_(;;)", 0),
    (word_count_any_in_main_parallel("(;;)"), "wc(main)_(;;)", 0),
    (word_count_any_parallel("endl"), "wc_endl", 0),
    (word_count_any_in_main_parallel("endl"), "wc(main)_endl", 0),
    (word_count_any_parallel("ii"), "wc_ii", 0),
    (word_count_any_in_main_parallel("ii"), "wc(main)_ii", 0),
    (word_count_any_parallel("_"), "wc__", 0),
    (word_count_any_in_main_parallel("_"), "wc(main)__", 0),
    (word_count_any_parallel("swap"), "wc_swap", 0),
    (word_count_any_in_main_parallel("swap"), "wc(main)_swap", 0),
    (word_count_any_parallel("move"), "wc_move", 0),
    (word_count_any_in_main_parallel("move"), "wc(main)_move", 0),
    (word_count_any_parallel("assert"), "wc_assert", 0),
    (word_count_any_in_main_parallel("assert"), "wc(main)_assert", 0),
    (word_count_any_in_assembler_parallel("movq"), "movq", 1),
    (word_count_any_in_assembler_parallel("movl"), "movl", 1),
    (word_count_any_in_assembler_parallel("addq"), "addq", 1),
    (word_count_any_in_assembler_parallel("addl"), "addl", 1),
    (word_count_any_in_assembler_parallel("subq"), "subq", 1),
    (word_count_any_in_assembler_parallel("subl"), "subl", 1),
    (word_count_any_in_assembler_parallel("cmpq"), "cmpq", 1),
    (word_count_any_in_assembler_parallel("cmpl"), "cmpl", 1),
    (word_count_any_in_assembler_parallel("push"), "push", 1),
    (word_count_any_in_assembler_parallel("pop"), "pop", 1),
    (word_count_any_in_assembler_parallel("j"), "j", 1),
    (word_count_any_in_assembler_parallel("call"), "call", 1),
    (code_length, "code_length", 0),
    (code_length_in_main, "code_length_in_main", 0),
    (comments_ratio, "comments_ratio", 0),
]

data_handle_funcs_and_names = [
    (standardize, "standardize"),
    (normalize, "normalize"),
    (lambda x: x, "nothing"),
]
